# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

parameters:
  - name: runMutation
    default: false
    values:
    - true
    - false

variables:
   projectFolder: 'website'
   buildFolder: 'website/build'
   qualityGateThreshold: $(Thresholds.codeCoverage)

stages:
- stage: Development
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: Development
    steps:
    - script: cd $(projectFolder) && npm install
      displayName: 'Install dependencies'
    - script: cd $(projectFolder) && npm run build
      displayName: 'Build'
    - script: cd $(projectFolder) && npm run test -- --onlyChanged --coverage --coverageThreshold='{"global":{"branches":"$(qualityGateThreshold)","functions":"$(qualityGateThreshold)","lines":"$(qualityGateThreshold)","statements":"$(qualityGateThreshold)"}}'
      displayName: 'Partial Test Suite' 
    - script: cd dotNetLogin && dotnet publish
      displayName: dotNet Publish
    - task: CopyFiles@2
      inputs:
        Contents: |
          website/build
          dotNetLogin/publish
        TargetFolder: '$(Build.ArtifactStagingDirectory)/release'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.ArtifactStagingDirectory)/release
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/release.zip'
        includeRootFolder: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/release.zip'

- stage: QA
  dependsOn: Development
  condition: succeeded('Development')
  pool:
      vmImage: ubuntu-latest
      environment: Experimental environment
  jobs:
  - job: Approval
    displayName: "Manual Approval"
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 60
        inputs:
          notifyUsers: 'E6022@itsector.pt'
          instructions: 'Test'
  - job: Testing
    steps:
    - script: cd $(projectFolder) && npm install
      displayName: 'Install dependencies'
    - script: cd $(projectFolder) && npm run build
      displayName: 'Build'
    - script: cd $(projectFolder) && npm run test -- --coverage --coverageThreshold='{"global":{"branches":"$(qualityGateThreshold)","functions":"$(qualityGateThreshold)","lines":"$(qualityGateThreshold)","statements":"$(qualityGateThreshold)"}}'
      displayName: 'Full Test Suite'
    - script: cd $(projectFolder) && npm run mutation
      displayName: Mutation testing
      condition: ${{parameters.runMutation}}